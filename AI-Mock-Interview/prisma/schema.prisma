generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @map("_id")
  name         String
  email        String       @unique
  Gender       gender?
  description  String?
  dob          String?
  ProfileImage String?
  languages    String[]
  tools        String[]
  frameworks   String[]
  Type         String       @default("Interviewee")
  Experience   Experience[]
  Linkedin     String?
  Github       String?
  resume       String?
  Twitter      String?
  AvgRating    Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  timeSlots    TimeSlot[]

  MockInterview     MockInterview[]
  Answer            Answer[]
  AptitudeInterview AptitudeInterview[]
  HRInterview       HRInterview[]
  HRUserAnswer      HRUserAnswer[]
  AptitudeQuestion  AptitudeQuestion[]
}

enum gender {
  male
  female
}

model Experience {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @unique
  CompanyName String?
  Role        String?
  Description String?
  Duration    String?

  User User @relation(fields: [userId], references: [id])
}

model MockInterview {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  MockResponse       Json[]
  jobPosition        String
  jobDesc            String
  jobexperience      String
  difficultyLevel    String
  numQuestions       Int
  interviewerImageId Int

  createdAt DateTime     @default(now())
  answers   UserAnswer[]
  User      User         @relation(fields: [userId], references: [id])
}

model AptitudeInterview {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  jobPosition     String
  jobDesc         String
  jobExperience   String
  difficultyLevel String
  totalQuestions  Int
  totalScore      Int                @default(0)
  passScore       Int?
  questions       AptitudeQuestion[]
  createdAt       DateTime           @default(now())

  User User @relation(fields: [userId], references: [id])
}

enum QuestionType {
  MAIN
  FOLLOWUP
  PROBING
}

model AptitudeQuestion {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  aptitudeInterviewId String   @db.ObjectId
  text                String
  options             String[]
  correctAnswer       String
  userAnswer          String?
  explanation         String?
  category            String?
  difficulty          String
  timeLimit           Int      @default(60)
  isCorrect           Boolean  @default(false)
  score               Int      @default(1)
  userId              String?
  createdAt           DateTime @default(now())

  AptitudeInterview AptitudeInterview @relation(fields: [aptitudeInterviewId], references: [id], onDelete: Cascade)
  User              User?             @relation(fields: [userId], references: [id])

  @@index([aptitudeInterviewId])
}

model HRInterview {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  jobPosition     String
  jobDescription  String
  jobExperience   String
  skills          String[]
  difficultyLevel String
  resumeUrl       String?
  totalScore      Int      @default(0)
  passScore       Int?
  createdAt       DateTime @default(now())

  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions HRQuestion[]
}

model HRQuestion {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  hrInterviewId     String       @db.ObjectId
  text              String
  type              QuestionType @default(MAIN)
  category          String?
  expectedKeyPoints String[]
  maxScore          Int?         @default(10)
  timeLimit         Int?         @default(120)
  createdAt         DateTime     @default(now())

  hrInterview HRInterview @relation(fields: [hrInterviewId], references: [id], onDelete: Cascade)

  followUpQuestions HRFollowUpQuestion[]
  userAnswer        HRUserAnswer?

  @@index([hrInterviewId])
}

// HRQuestion --> []HRFollowUpQuestion --> []ans connected to each questions
model HRFollowUpQuestion {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  mainQuestionId    String       @db.ObjectId
  text              String
  type              QuestionType @default(FOLLOWUP)
  category          String?
  expectedKeyPoints String[]
  maxScore          Int?         @default(5)
  timeLimit         Int?         @default(90)
  createdAt         DateTime     @default(now())

  mainQuestion         HRQuestion     @relation(fields: [mainQuestionId], references: [id], onDelete: Cascade)
  hRFollowUpQuestionId String?        @db.ObjectId
  HRUserAnswer         HRUserAnswer[]

  @@index([mainQuestionId])
}

model HRUserAnswer {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  hrQuestionId          String              @unique @db.ObjectId
  hrfollowupquestionsId String              @db.ObjectId
  userId                String
  userAnswer            String
  evaluationFeedback    String?
  score                 Int?
  matchedKeyPoints      String[]
  voiceTone             String?
  confidence            String?
  bodyLanguage          String?
  facialExpressions     String?
  speakingPace          String?
  overallPresentation   String?
  videoUrl              String?
  createdAt             DateTime            @default(now())
  followup              HRFollowUpQuestion? @relation(fields: [hrfollowupquestionsId], references: [id], onDelete: Cascade)

  hrQuestion HRQuestion @relation(fields: [hrQuestionId], references: [id])
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAnswer {
  id                     String              @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String
  question               String
  userAnswer             String
  createdAt              DateTime            @default(now())
  Intervieweefeedback    String
  Intervieweerating      Int
  voiceTone              String
  confidence             String
  bodyLanguage           String
  facialExpressions      String
  speakingPace           String
  overallPresentation    String
  improvementSuggestions String
  videoUrl               String
  correctAnswer          String?
  mockInterviewId        String              @db.ObjectId
  mockInterview          MockInterview?      @relation(fields: [mockInterviewId], references: [id])
  InterviewGroup         InterviewGroup?     @relation(fields: [interviewGroupId], references: [id])
  interviewGroupId       String?             @db.ObjectId
  InterviewGroupUser     InterviewGroupUser? @relation(fields: [interviewGroupUserId], references: [id])
  interviewGroupUserId   String?             @db.ObjectId
}

model TimeSlot {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  startTime DateTime
  endTime   DateTime
  status    TimeSlotStatus @default(available)
  createdAt DateTime       @default(now())
  user      User           @relation(fields: [userId], references: [id])
}

enum TimeSlotStatus {
  available
  booked
  cancelled
}

model InterviewGroup {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  publicId           String               @unique
  name               String
  createdBy          String
  dateTime           DateTime
  isStarted          Boolean              @default(false)
  isEnded            Boolean              @default(false)
  role               String
  timeLimit          Int                  @default(60)
  skills             String[]
  questionNo         Int                  @default(5)
  isActive           Boolean              @default(true)
  experience         String
  difficulty         String
  createdAt          DateTime             @default(now())
  InterviewGroupUser InterviewGroupUser[]
  InterviewQuestion  Question[]
  UserAnswer         UserAnswer[]
}

model InterviewGroupUser {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isAdmin           Boolean        @default(false)
  userId            String
  name              String?
  email             String?
  imageUrl          String?
  groupId           String         @db.ObjectId
  isReady           Boolean        @default(false)
  totalScore        Int            @default(0)
  totalAnswers      Int            @default(0)
  intervieQuestions Question[]
  group             InterviewGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  Answer            Answer[]
  UserAnswer        UserAnswer[]

  @@unique([userId, groupId])
  @@index([groupId])
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId       String   @db.ObjectId
  text          String
  correctAnswer String
  timeLimit     Int      @default(60)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  group                InterviewGroup      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  answers              Answer[]
  InterviewGroupUser   InterviewGroupUser? @relation(fields: [interviewGroupUserId], references: [id])
  interviewGroupUserId String?             @db.ObjectId

  @@index([groupId])
}

model Answer {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId    String   @db.ObjectId
  participantId String   @db.ObjectId
  userId        String
  text          String
  submittedAt   DateTime @default(now())
  score         Int?
  feedback      Json?

  question    Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)
  participant InterviewGroupUser @relation(fields: [participantId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, participantId])
  @@index([questionId])
  @@index([participantId])
}
